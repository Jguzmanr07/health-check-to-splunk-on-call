name: CI/CD

on:
  push:
    branches:
      - master

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CF_WORKERS_API_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:current
      env:
        DOCKER_USER: ${{ env.DOCKER_USER }}
        DOCKER_PASS: ${{ env.DOCKER_PASS }}
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm i
      - name: Persist node_modules cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Run tests
        run: npm t
      - name: Run linter
        run: npm run lint

  publish:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:current
      env:
        DOCKER_USER: ${{ env.DOCKER_USER }}
        DOCKER_PASS: ${{ env.DOCKER_PASS }}
        CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_API_TOKEN: ${{ env.CLOUDFLARE_API_TOKEN }}
    needs: test
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Publish
        uses: cloudflare/wrangler-action@2.0.0
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          wranglerVersion: '2.14.0'
        env:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      # - name: Publish
      #   uses: cloudflare/wrangler-action@2.0.0
      #   with:
      #     apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #     preCommands: |
      #       wrangler kv:namespace create KV_STATUS_PAGE
      #       apt-get update && apt-get install -y jq
      #       export KV_NAMESPACE_ID=$(wrangler kv:namespace list | jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id")
      #       echo "[env.production]" >> wrangler.toml
      #       echo "kv_namespaces = [{binding=\"KV_STATUS_PAGE\", id=\"${KV_NAMESPACE_ID}\"}]" >> wrangler.toml
      #       [ -z "$SECRET_SLACK_WEBHOOK_URL" ] && echo "Secret SECRET_SLACK_WEBHOOK_URL not set, creating dummy one..." && SECRET_SLACK_WEBHOOK_URL="default-gh-action-secret" || true
      #       [ -z "$SECRET_TELEGRAM_API_TOKEN" ] && echo "Secret SECRET_TELEGRAM_API_TOKEN not set, creating dummy one..." && SECRET_TELEGRAM_API_TOKEN="default-gh-action-secret" || true
      #       [ -z "$SECRET_TELEGRAM_CHAT_ID" ] && echo "Secret SECRET_TELEGRAM_CHAT_ID not set, creating dummy one..." && SECRET_TELEGRAM_CHAT_ID="default-gh-action-secret" || true
      #       [ -z "$SECRET_DISCORD_WEBHOOK_URL" ] && echo "Secret SECRET_DISCORD_WEBHOOK_URL not set, creating dummy one..." && SECRET_DISCORD_WEBHOOK_URL="default-gh-action-secret" || true
      #     postCommands: |
      #       yarn kv-gc
      #     secrets: |
      #       SECRET_SLACK_WEBHOOK_URL
      #       SECRET_TELEGRAM_API_TOKEN
      #       SECRET_TELEGRAM_CHAT_ID
      #       SECRET_DISCORD_WEBHOOK_URL
      #     environment: production
      #   env:
      #     CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      #     SECRET_SLACK_WEBHOOK_URL: ${{secrets.SECRET_SLACK_WEBHOOK_URL}}
      #     SECRET_TELEGRAM_API_TOKEN: ${{secrets.SECRET_TELEGRAM_API_TOKEN}}
      #     SECRET_TELEGRAM_CHAT_ID: ${{secrets.SECRET_TELEGRAM_CHAT_ID}}
      #     SECRET_DISCORD_WEBHOOK_URL: ${{secrets.SECRET_DISCORD_WEBHOOK_URL}}
